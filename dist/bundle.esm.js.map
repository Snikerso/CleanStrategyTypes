{"version":3,"file":"bundle.esm.js","sources":["../src/index.ts"],"sourcesContent":["export interface IVote {\n  id: string;\n  roundId: string;\n  userId: string;\n  taskId: string;\n  count?: number;\n}\n\nexport type ITask = {\n  id: string;\n  title: string;\n  value: number;\n};\n\nexport type ISpace = {\n  id: string;\n  name: string;\n  roles: string[];\n};\n\nexport interface ICurrentUser {\n  id: string;\n  displayName: string;\n  email: string;\n  deviceId: string;\n  tenants: ISpace[];\n}\n\nexport interface IUser {\n  id: string;\n  displayName: string;\n}\n\nexport interface IRound {\n  id: string;\n  order: number;\n  spaceId: string;\n  endDate: Date;\n  status?: \"finished\" | \"active\";\n}\n\nexport enum SpaceEventTypes {\n  CONNECT = \"CONNECT\",\n  DISCONNECT = \"DISCONNECT\",\n  VOTE = \"VOTE\",\n  DELETE_VOTE = \"DELETE_VOTE\",\n  RESET_VOTES = \"RESET_VOTES\",\n  START_ROUND = \"START_ROUND\",\n}\n\n// RequestMessage\n\nexport type VoteMessageBody = {\n  type: \"minus\" | \"plus\";\n  taskId: string;\n  currentUserId: string;\n};\n\nexport type VoteDeleteMessageBody = {\n  voteId: string;\n};\n\n// ResponseMessage\ntype ResponseMessageBase = {\n  errorMessages?: { type: string; message: string }[];\n};\n\nexport type VoteMessageResponse = ResponseMessageBase & {\n  vote: IVote;\n};\nexport type VoteDeleteMessageResponse = ResponseMessageBase & {\n  voteId: string;\n};\n\nexport type StartRoundResponseMessage = ResponseMessageBase & {\n  round: IRound;\n};\n\nexport type ConnectMessageResponse = ResponseMessageBase & {\n  votes: IVote[];\n  tasks: ITask[];\n  users: IUser[];\n  currentPeriod: IRound;\n};\n\nexport type ResetVotesMessageResponse = ResponseMessageBase & {\n  votes: IVote[];\n};\n\nexport type StartRoundMessageResponse = ResponseMessageBase & {\n  round?: IRound;\n};\n\nexport interface GameServerToClientEvents {\n  [SpaceEventTypes.CONNECT]: (message: ConnectMessageResponse) => void;\n  [SpaceEventTypes.DISCONNECT]: (message: any) => void;\n  [SpaceEventTypes.START_ROUND]: (message: StartRoundMessageResponse) => void;\n  [SpaceEventTypes.VOTE]: (message: VoteMessageResponse) => void;\n  [SpaceEventTypes.DELETE_VOTE]: (message: VoteDeleteMessageResponse) => void;\n  [SpaceEventTypes.RESET_VOTES]: (message: ResetVotesMessageResponse) => void;\n}\n\nexport interface GameClientToServerEvents {\n  [SpaceEventTypes.CONNECT]: (message: any) => void;\n  [SpaceEventTypes.START_ROUND]: (message: any) => void;\n  [SpaceEventTypes.VOTE]: (message: VoteMessageBody) => void;\n  [SpaceEventTypes.DELETE_VOTE]: (message: VoteDeleteMessageBody) => void;\n  [SpaceEventTypes.RESET_VOTES]: (message: any) => void;\n}\n"],"names":[],"mappings":"IAyCY,gBAOX;AAPD,CAAA,UAAY,eAAe,EAAA;AACzB,IAAA,eAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,eAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,eAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,eAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,eAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,eAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC7B,CAAC,EAPW,eAAe,KAAf,eAAe,GAO1B,EAAA,CAAA,CAAA;;;;"}